{
    "collab_server" : "",
    "contents" : "library(RODBC)\nlibrary(lubridate)\n\nserver <- shinyServer(function(input, output, session) {\n  \n  \n  observe({\n    \n    con <- odbcDriverConnect('driver={SQL Server};server=AXONML-SERVER;database=Retail_Dashboard;uid=axonmluser;pwd=axon*2016BZA;',rows_at_time = 100)\n    \n    str_input1 <- input$year_inptdr1\n    str_input2 <- input$mon_inptdr2\n    str_input3<-input$category_inptdr3\n    str_input4<-input$branch_inptdr4\n    str_input5<-input$brand_inptdr5\n    \n    if(str_input1=='All'){\n      \n      if(str_input2=='All'){\n        \n        \n        ################   Revenue Graph 1 1  ###########################\n        \n        yRevenueDF<-sqlQuery(con, paste0(\"select sum(net_pay) as Revenue,year(sold_date) as Years\n                                         from sales_data \n                                         group by year(sold_date) \n                                         order by year(sold_date)\"))\n        \n        output$year_sales_graph <- renderPlotly({\n          \n          f <- list(family = \"Courier New, monospace\",size = 18,color = \"#7f7f7f\")\n          x <- list(title = \"Year\",titlefont = f)\n          y <- list(title = \"Revenue ($)\",titlefont = f)\n          \n          revenuechart<-plot_ly(x=yRevenueDF$Years,y=yRevenueDF$Revenue,type=\"area\", showlegend=FALSE)%>%\n            layout(xaxis = x, yaxis = y, showlegend=FALSE)\n          \n          year_sales_graph<-plotly_build(qplot(1:10))\n          year_sales_graph$elementId <- NULL\n          return(revenuechart)\n        }) ## Output$year_sales_graph()\n        \n        ###################   Wordcloud 1 2 ####################################################\n        \n        ywordcloud <-sqlQuery(con, paste0(\"select item_name as Item from item_data, sales_data \n                                          where sales_data.item_id = item_data.item_id\"))\n        \n        \n        item_name = gsub(\"(RT|via)((?:\\\\b\\\\W*@\\\\w+)+)\",\"\", ywordcloud$Item )\n        \n        # item_name = gsub(\"@\\\\w+\", \"\", item_name)   # remove at people\n        \n        item_name = gsub(\"[[:punct:]]\", \"\", item_name)   # remove punctuation\n        \n        item_name = gsub(\"[[:digit:]]\", \"\", item_name)   # remove numbers\n        \n        item_df <- data.frame(item_name) ## dataframe\n        \n        itemcorpus <- Corpus(VectorSource(item_df$item_name))   ## corpus\n        \n        output$word_cloud<- renderPlot({\n          pal <- brewer.pal(9,\"Spectral\")\n          pal <- pal[(1:9)]\n          set.seed(123)\n          wordcloud::wordcloud(words = itemcorpus,scale=c(3.5,.5),max.words=75,\n                               random.order=FALSE,rot.per=0.35, use.r.layout=FALSE, colors=pal)\n        }) ### output$word_cloud()\n        \n        ##################### Category Graph  1 3 #############################################\n        \n        ycategoryDF<-sqlQuery(con, \"select item_category as Category,\n                              sum(sales_data.net_pay) as Revenue \n                              FROM item_data,sales_data \n                              where sales_data.item_id = item_data.item_id \n                              group by  item_category\n                              order by Category\")\n        \n        output$category_analysis_graph <- renderPlotly({\n          \n          f <- list(family = \"Courier New, monospace\",size = 18,color = \"#7f7f7f\")\n          x <- list(title = \"Category\",titlefont = f)\n          y <- list(title = \"Revenue ($)\",titlefont = f)\n          \n          categorychart<-plot_ly(x=ycategoryDF$Category,y=ycategoryDF$Revenue,type=\"bar\",color = ycategoryDF$Category, showlegend=FALSE)%>%\n            layout(xaxis = x, yaxis = y, showlegend=FALSE)\n          \n          return(categorychart)\n          \n        }) ## output$category_analysis_graph()\n        \n        ###################   Brand Table 1 4  ####################################################################\n        \n        ybrandDF<- sqlQuery(con,paste0(\"select top 10 brand_name as Brand,\n                                       sum(net_pay) as Revenue \n                                       from sales_data,brand_data,item_data \n                                       where brand_data.brand_id = item_data.brand_id \n                                       and item_data.item_id = sales_data.item_id \n                                       group by brand_name \n                                       order by Revenue DESC\"))\n        \n        output$brand_sales_graph<- renderGvis({\n          BrandRevenue<- select(ybrandDF,Brand,Revenue)\n          BrandRevenuechart<-gvisTable(BrandRevenue,options=list(height=\"250px\"))\n          return(BrandRevenuechart)\n        }) ## output$brand_sales_graph()\n        \n        #################   Branch Map   1 5  ########################################################################\n        \n        ybranchDF<-sqlQuery(con,paste0(\"select branch_name as Branch,sum(net_pay) as Revenue,\n                                       branch_data.lat as latitude,\n                                       branch_data.lon as longitude \n                                       from branch_data,sales_data \n                                       where branch_data.branch_id = sales_data.branch_id \n                                       group by branch_name, branch_data.lat,branch_data.lon\n                                       order by Branch\"))\n        \n        output$branch_analysis_graph <- renderLeaflet({\n          leaflet(data=ybranchDF) %>%\n            addTiles(urlTemplate = \"//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png\",\n                     attribution = 'Maps by <a href=\"http://www.mapbox.com/\">Mapbox</a>') %>%\n            \n            addMarkers(data = ybranchDF, lng = ybranchDF$longitude, lat = ybranchDF$latitude, \n                       popup = paste( \"<div class='leaflet-popup-scrolled' style='max-height:200px'>\",\n                                      \"<h5 style='color:black'><b>\",ybranchDF$Branch,\":\",ybranchDF$Revenue,\"</b></h5>\"))%>%\n            setView(lng = ybranchDF$longitude, lat = ybranchDF$latitude, zoom = 7) %>%\n            fitBounds(lng1 = max(ybranchDF$longitude),lat1 = max(ybranchDF$latitude),\n                      lng2 = min(ybranchDF$longitude),lat2 = min(ybranchDF$latitude))%>%\n            clearBounds()\n          \n        }) ##output$branch_analysis_graph()\n        \n        \n        ##################### Registered Vs Un Registered  1  6  ###############################################\n        \n        yregisterVsUnregistered <- sqlQuery(con, paste0(\"select customer_type,sum(net_pay) as Revenue  from \n                                                        (select case when \n                                                        customer_id = 0 then 'Unregistered'\n                                                        else 'Registered' end as customer_type, \n                                                        net_pay from sales_data) table1 group by customer_type\"))\n        \n        output$registered_sales_graph<- renderHighchart({\n          \n          highchart(width = 100, height = 100) %>%\n            hc_title(text = \"\") %>%\n            hc_chart(type = \"pie\", options3d = list(enabled = TRUE, alpha = 70, beta = 0,color = 'rgb(255, 110, 176)')) %>%\n            hc_plotOptions(pie = list(depth = 70)) %>%\n            hc_add_series_labels_values(yregisterVsUnregistered$customer_type,yregisterVsUnregistered$Revenue) %>%\n            hc_add_theme(hc_theme(\n              chart = list(backgroundColor = NULL)\n            ))\n        }) ### Output$registered_sales_graph()\n        \n        ########################## Gender Chart 1 7  #############################################################\n        \n        ygenderDF <- sqlQuery(con, paste0(\"select Gender, sum(Revenue) as Revenue from (select case \n                                          when item_for = 'boy' then 'Male'\n                                          when item_for = 'Men' then 'Male'\n                                          when item_for = 'girl' then 'Female' \n                                          when item_for = 'Women' then 'Female' \n                                          when item_for = 'home-utility' then 'Home-Utility' end as Gender, \n                                          sum(net_pay) as Revenue from item_data,sales_data\n                                          where item_data.item_id = sales_data.item_id\n                                          group by  item_for) table1 group by Gender\"))\n        \n        output$gender_sales_graph<- renderHighchart({\n          \n          highchart(width = 100, height = 100) %>%\n            hc_title(text = \"\") %>%\n            \n            hc_chart(type = \"pie\", options3d = list(enabled = TRUE, alpha = 70, beta = 0,color = 'rgb(255, 110, 176)')) %>%\n            hc_plotOptions(pie = list(depth = 70)) %>%\n            hc_add_series_labels_values(ygenderDF$Gender,ygenderDF$Revenue) %>%\n            hc_add_theme(hc_theme(\n              chart = list(backgroundColor = NULL)\n            ))\n        }) ### output$gender_sales_graph()\n        \n        ########################## Age Group Chart 1 8 #############################\n        \n        yagesDF<-sqlQuery(con, paste0(\"select item_for, \n                                      sum(net_pay) as Revenue from item_data,sales_data\n                                      where item_data.item_id = sales_data.item_id\n                                      group by  item_for\"))\n        \n        output$age_analysis_graph <- renderPlotly({\n          \n          f <- list(family = \"Courier New, monospace\",size = 18,color = \"#7f7f7f\")\n          x <- list(title = \"Category\",titlefont = f)\n          y <- list(title = \"Revenue ($)\",titlefont = f)\n          \n          ageschart<-plot_ly(x=yagesDF$item_for,y=yagesDF$Revenue,type=\"bar\",color = yagesDF$item_for, showlegend=FALSE)%>%\n            layout(xaxis = x, yaxis = y, showlegend=FALSE)\n          \n          return(ageschart)\n          \n        }) ## output$age_analysis_graph()\n        \n        \n        ############################ Group Graph 1 9 ########################################################\n        yRevenueDF1 <- sqlQuery(con, paste0(\"select year(sold_date) as Year,\n                                            sum(net_pay) as Revenue\n                                            from sales_data \n                                            group by year(sold_date) \n                                            order by year(sold_date)\"))\n        \n        ybranchDF1 <- sqlQuery(con,paste0(\"select year(sales_data.sold_date) as Year,\n                                          sum(net_pay) as Revenue\n                                          from branch_data,sales_data \n                                          where branch_data.branch_id = sales_data.branch_id and\n                                          branch_data.branch_name = '\", str_input4, \"'\n                                          group by branch_name, year(sales_data.sold_date) \n                                          order by Year\"))\n        \n        \n        ycategoryDF1 <- sqlQuery(con,paste0(\"SELECT year(sales_data.sold_date) AS Year,\n                                            sum(sales_data.net_pay) AS Revenue \n                                            FROM item_data,sales_data \n                                            WHERE sales_data.item_id = item_data.item_id and\n                                            item_category = '\", str_input3, \"'\n                                            GROUP BY  year(sales_data.sold_date) \n                                            ORDER BY Year\"))\n        \n        \n        ybrandDF1 <- sqlQuery(con,paste0(\"select year(sales_data.sold_date) as Year,\n                                         sum(net_pay) as Revenue \n                                         from sales_data,brand_data,item_data \n                                         where brand_data.brand_id = item_data.brand_id \n                                         and item_data.item_id = sales_data.item_id and\n                                         brand_data.brand_name = '\", str_input5, \"'\n                                         group by year(sales_data.sold_date)\n                                         order by Year\"))\n        \n        output$group_analysis_graph<- renderHighchart({\n          highchart() %>%\n            hc_chart(type=\"grouped\") %>%\n            \n            hc_xAxis(categories=ybranchDF1$Year) %>%\n            hc_yAxis(\n              title = list(text = \"Revenue ($)\")\n            ) %>%\n            hc_add_series(name = \"Category\",data = ycategoryDF1$Revenue,type = \"column\",color=\"orange\") %>%\n            hc_add_series(name = \"Branch\",data = ybranchDF1$Revenue,type = \"line\",color=\"green\") %>%\n            hc_add_series(name = \"Brand\",data = ybrandDF1$Revenue,type = \"line\",color=\"red\")\n        }) ## output$group_analysis_graph\n        \n        \n      }else{       ### if-2 close\n        \n        str_input2 <- as.integer(str_input2)\n        \n        ################### Revenue Graph 2  1   #######################################################################\n        \n        yRevenueDF<-sqlQuery(con, paste0(\"select sum(net_pay) as Revenue,year(sold_date) as Years\n                                         from sales_data where month(sold_date)=\",str_input2,\"\n                                         group by year(sold_date) \n                                         order by year(sold_date)\"))\n        \n        output$year_sales_graph<- renderPlotly({\n          \n          f <- list(family = \"Courier New, monospace\",size = 18,color = \"#7f7f7f\")\n          x <- list(title = \"Year\",titlefont = f)\n          y <- list(title = \"Revenue ($)\",titlefont = f)\n          \n          revenuechart<-plot_ly(x=as.integer(yRevenueDF$Years),y=yRevenueDF$Revenue,type=\"area\",showlegend=FALSE)%>%\n            layout(xaxis = x, yaxis = y, showlegend=FALSE)\n          \n          year_sales_graph<-plotly_build(qplot(1:10))\n          year_sales_graph$elementId <- NULL\n          return(revenuechart)\n        }) ## Output$year_sales_graph()\n        \n        ################## Wordcloud 2  2  ###########################################################\n        \n        ywordcloud <-sqlQuery(con, paste0(\"select item_name as Item from item_data, sales_data \n                                          where sales_data.item_id = item_data.item_id\n                                          and month(sales_data.sold_date)=\",str_input2))\n        \n        \n        item_name = gsub(\"(RT|via)((?:\\\\b\\\\W*@\\\\w+)+)\",\"\", ywordcloud$Item )\n        \n        # item_name = gsub(\"@\\\\w+\", \"\", item_name)   # remove at people\n        \n        item_name = gsub(\"[[:punct:]]\", \"\", item_name)   # remove punctuation\n        \n        item_name = gsub(\"[[:digit:]]\", \"\", item_name)   # remove numbers\n        \n        item_df <- data.frame(item_name) ## dataframe\n        \n        itemcorpus <- Corpus(VectorSource(item_df$item_name))   ## corpus\n        \n        output$word_cloud<- renderPlot({\n          pal <- brewer.pal(9,\"Spectral\")\n          pal <- pal[(1:9)]\n          set.seed(123)\n          wordcloud::wordcloud(words = itemcorpus,scale=c(3,.5),max.words=75,\n                               random.order=FALSE,rot.per=0.35, use.r.layout=FALSE, colors=pal)\n        }) ### output$word_cloud()\n        \n        #####################  Category Graph 2 3   ##################################################\n        \n        ycategoryDF<-sqlQuery(con, paste0(\"select item_category as Category,\n                                          sum(sales_data.net_pay) as Revenue \n                                          FROM item_data,sales_data \n                                          where sales_data.item_id = item_data.item_id\n                                          and month(sold_date)=\",str_input2,\" \n                                          group by  item_category\n                                          order by Category\"))\n        \n        output$category_analysis_graph <- renderPlotly({\n          \n          f <- list(family = \"Courier New, monospace\",size = 18,color = \"#7f7f7f\")\n          x <- list(title = \"Category\",titlefont = f)\n          y <- list(title = \"Revenue ($)\",titlefont = f)\n          \n          categorychart<-plot_ly(x=ycategoryDF$Category,y=ycategoryDF$Revenue,type=\"bar\",color = ycategoryDF$Category, showlegend=FALSE)%>%\n            layout(xaxis = x, yaxis = y, showlegend=FALSE)\n          \n          return(categorychart)\n          \n        }) ## output$category_analysis_graph\n        \n        \n        ###############  Brand Table 2  4 #################################\n        \n        ybrandDF<- sqlQuery(con,paste0(\"select top 10 brand_name as Brand,\n                                       sum(net_pay) as Revenue \n                                       from sales_data,brand_data,item_data \n                                       where brand_data.brand_id = item_data.brand_id \n                                       and item_data.item_id = sales_data.item_id\n                                       and month(sales_data.sold_date) =\",str_input2,\"\n                                       group by brand_name \n                                       order by Revenue DESC\"))\n        \n        output$brand_sales_graph<- renderGvis({\n          BrandRevenue<- select(ybrandDF,Brand,Revenue)\n          BrandRevenuechart<-gvisTable(BrandRevenue,options=list(height=\"250px\"))\n          return(BrandRevenuechart)\n          \n        }) ### output$brand_sales_graph()\n        \n        ######################### Branch Map 2  5   ##################################################\n        \n        ybranchDF<-sqlQuery(con,paste0(\"select branch_name as Branch,\n                                       sum(net_pay) as Revenue,\n                                       branch_data.lat as latitude,\n                                       branch_data.lon as longitude \n                                       from branch_data,sales_data \n                                       where branch_data.branch_id = sales_data.branch_id \n                                       and month(sales_data.sold_date) =\",str_input2,\"\n                                       group by branch_name, branch_data.lat,branch_data.lon\n                                       order by Branch\"))    \n        output$branch_analysis_graph <- renderLeaflet({\n          leaflet(data=ybranchDF) %>%\n            addTiles(urlTemplate = \"//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png\",\n                     attribution = 'Maps by <a href=\"http://www.mapbox.com/\">Mapbox</a>') %>%\n            \n            addMarkers(data = ybranchDF, lng = ybranchDF$longitude, lat = ybranchDF$latitude, \n                       popup = paste( \"<div class='leaflet-popup-scrolled' style='max-height:200px'>\",\n                                      \"<h5 style='color:black'><b>\",ybranchDF$Branch,\":\",ybranchDF$Revenue,\"</b></h5>\"))%>%\n            setView(lng = ybranchDF$longitude, lat = ybranchDF$latitude, zoom = 7) %>%\n            fitBounds(lng1 = max(ybranchDF$longitude),lat1 = max(ybranchDF$latitude),\n                      lng2 = min(ybranchDF$longitude),lat2 = min(ybranchDF$latitude))%>%\n            clearBounds()\n          \n        }) ##output$branch_analysis_graph\n        \n        \n        ##################### Registered Vs Unregistered Graph 2  6  ###########################\n        \n        yregisterVsUnregistered <- sqlQuery(con, paste0(\"select customer_type,sum(net_pay) as Revenue  from \n                                                        (select case when \n                                                        customer_id = 0 then 'Unregistered'\n                                                        else 'Registered' end as customer_type, \n                                                        net_pay from sales_data where month(sold_date) =\",str_input2,\" ) table1 group by customer_type\"))\n        \n        output$registered_sales_graph<- renderHighchart({\n          \n          highchart(width = 100, height = 100) %>%\n            hc_title(text = \"\") %>%\n            \n            hc_chart(type = \"pie\", options3d = list(enabled = TRUE, alpha = 70, beta = 0,color = 'rgb(255, 110, 176)')) %>%\n            hc_plotOptions(pie = list(depth = 70)) %>%\n            hc_add_series_labels_values(yregisterVsUnregistered$customer_type,yregisterVsUnregistered$Revenue) %>%\n            hc_add_theme(hc_theme(\n              chart = list(\n                backgroundColor = NULL\n                \n              )\n            ))\n        })  ###  Output$registered_sales_graph\n        \n        #####################  Gender Chart 2  7  ##########################################################\n        \n        ygenderDF <- sqlQuery(con, paste0(\"select Gender, sum(Revenue) as Revenue from (select case \n                                          when item_for = 'boy' then 'Male'\n                                          when item_for = 'Men' then 'Male'\n                                          when item_for = 'girl' then 'Female' \n                                          when item_for = 'Women' then 'Female' \n                                          when item_for = 'home-utility' then 'Home-Utility' end as Gender, \n                                          sum(net_pay) as Revenue from item_data,sales_data\n                                          where item_data.item_id = sales_data.item_id and\n                                          month(sales_data.sold_date) = \",str_input2,\"\n                                          group by  item_for) table1 group by Gender\"))\n        \n        output$gender_sales_graph<- renderHighchart({\n          \n          highchart(width = 100, height = 100) %>%\n            hc_title(text = \"\") %>%\n            \n            hc_chart(type = \"pie\", options3d = list(enabled = TRUE, alpha = 70, beta = 0,color = 'rgb(255, 110, 176)')) %>%\n            hc_plotOptions(pie = list(depth = 70)) %>%\n            hc_add_series_labels_values(ygenderDF$Gender,ygenderDF$Revenue) %>%\n            hc_add_theme(hc_theme(\n              chart = list(\n                backgroundColor = NULL\n                \n              )\n            ))\n        })  ####  output#gender_sales_graph()\n        \n        ##################  Age Group chart 2 8  ###################################\n        \n        yagesDF<-sqlQuery(con, paste0(\"select item_for,sum(net_pay) as Revenue from item_data,sales_data\n                                      where item_data.item_id = sales_data.item_id and\n                                      month(sales_data.sold_date) =\",str_input2,\" \n                                      group by  item_for\"))\n        \n        output$age_analysis_graph <- renderPlotly({\n          \n          f <- list(family = \"Courier New, monospace\",size = 18,color = \"#7f7f7f\")\n          x <- list(title = \"Category\",titlefont = f)\n          y <- list(title = \"Revenue ($)\",titlefont = f)\n          \n          ageschart<-plot_ly(x=yagesDF$item_for,y=yagesDF$Revenue,type=\"bar\",color = yagesDF$item_for, showlegend=FALSE)%>%\n            layout(xaxis = x, yaxis = y, showlegend=FALSE)\n          \n          return(ageschart)\n          \n        }) ## output$age_analysis_graph\n        \n        \n        ################ Group Graph 2 9 ################################################################\n        \n        yRevenueDF1 <- sqlQuery(con, paste0(\"select year(sold_date) as Year,\n                                            sum(net_pay) as Revenue\n                                            from sales_data where month(sales_data.sold_date)=\",str_input2,\"\n                                            group by year(sold_date)  \n                                            order by year(sold_date)\"))\n        \n        ybranchDF1 <- sqlQuery(con,paste0(\"select year(sales_data.sold_date) as Year,\n                                          sum(net_pay) as Revenue\n                                          from branch_data,sales_data \n                                          where branch_data.branch_id = sales_data.branch_id and\n                                          month(sales_data.sold_date)=\",str_input2,\" and\n                                          branch_data.branch_name = '\", str_input4, \"'\n                                          group by branch_name, year(sales_data.sold_date) \n                                          order by Year\"))\n        \n        \n        ycategoryDF1 <- sqlQuery(con,paste0(\"select year(sales_data.sold_date) as Year,\n                                            sum(sales_data.net_pay) as Revenue \n                                            FROM item_data,sales_data \n                                            where sales_data.item_id = item_data.item_id and\n                                            month(sales_data.sold_date)=\",str_input2,\" and\n                                            item_category = '\", str_input3, \"'\n                                            group by  year(sales_data.sold_date) \n                                            order by Year\"))\n        \n        \n        ybrandDF1 <- sqlQuery(con,paste0(\"select year(sales_data.sold_date) as Year,\n                                         sum(net_pay) as Revenue \n                                         from sales_data,brand_data,item_data \n                                         where brand_data.brand_id = item_data.brand_id \n                                         and item_data.item_id = sales_data.item_id and\n                                         month(sales_data.sold_date)=\",str_input2,\" and\n                                         brand_data.brand_name = '\", str_input5, \"'\n                                         group by year(sales_data.sold_date)\n                                         order by Year\"))\n        \n        output$group_analysis_graph<- renderHighchart({\n          \n          highchart() %>%\n            hc_chart(type=\"grouped\") %>%\n            \n            hc_xAxis(categories=ybranchDF1$Year) %>%\n            hc_yAxis(\n              title = list(text = \"Revenue\")\n            ) %>%\n            hc_add_series(name = \"Category\",data = ycategoryDF1$Revenue,type = \"column\",color=\"orange\") %>%\n            hc_add_series(name = \"Branch\",data = ybranchDF1$Revenue,type = \"line\",color=\"green\") %>%\n            hc_add_series(name = \"Brand\",data = ybrandDF1$Revenue,type = \"line\",color=\"red\")\n        }) ## output$group_analysis_graph\n        \n        \n      } ### else1\n      \n  }else{    ### if-1\n    \n    str_input1 <- as.integer(str_input1)\n    \n    if(str_input2=='All'){\n      \n      ############################  Revenue Graph 3 1 #########################################\n      \n      \n      yRevenueDF<-sqlQuery(con, paste0(\"select sum(net_pay) as Revenue,month(sold_date) as Months\n                                       from sales_data where year(sold_date)=\",str_input1,\" \n                                       group by month(sold_date) \n                                       order by month(sold_date)\"))\n      \n      yRevenueDF$month_labels <- list(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\")\n      \n      output$year_sales_graph<- renderPlotly({\n        \n        f <- list(family = \"Courier New, monospace\",size = 18,color = \"#7f7f7f\")\n        x <- list(title = \"Month\",titlefont = f)\n        y <- list(title = \"Revenue ($)\",titlefont = f)\n        \n        revenuechart<-plot_ly(x=yRevenueDF$month_labels,y=yRevenueDF$Revenue,type=\"area\", showlegend = FALSE)%>%\n          layout(xaxis = x, yaxis = y, showlegend = FALSE)\n        \n        year_sales_graph<-plotly_build(qplot(1:10))\n        year_sales_graph$elementId <- NULL\n        return(revenuechart)\n      }) ## Output$year_sales_graph\n      \n      ######################  Wordcloud 3  2   #################################################\n      \n      ywordcloud <-sqlQuery(con, paste0(\"select item_name as Item from item_data, sales_data \n                                        where sales_data.item_id = item_data.item_id\n                                        and year(sales_data.sold_date)=\",str_input1))\n      \n      \n      item_name = gsub(\"(RT|via)((?:\\\\b\\\\W*@\\\\w+)+)\",\"\", ywordcloud$Item )\n      \n      # item_name = gsub(\"@\\\\w+\", \"\", item_name)   # remove at people\n      \n      item_name = gsub(\"[[:punct:]]\", \"\", item_name)   # remove punctuation\n      \n      item_name = gsub(\"[[:digit:]]\", \"\", item_name)   # remove numbers\n      \n      item_df <- data.frame(item_name) ## dataframe\n      \n      itemcorpus <- Corpus(VectorSource(item_df$item_name))   ## corpus\n      \n      \n      output$word_cloud<- renderPlot({\n        pal <- brewer.pal(9,\"Spectral\")\n        pal <- pal[(1:9)]\n        set.seed(123)\n        wordcloud::wordcloud(words = itemcorpus,scale=c(3.5,.5),max.words=75,\n                             random.order=FALSE,rot.per=0.35, use.r.layout=FALSE, colors=pal)\n      }) ### wordcloud\n      \n      ########################  Categoory Graph 3 3 ########################################\n      \n      ycategoryDF<-sqlQuery(con, paste0(\"select item_category as Category,\n                                        sum(sales_data.net_pay) as Revenue \n                                        FROM item_data,sales_data \n                                        where sales_data.item_id = item_data.item_id\n                                        and year(sold_date)=\",str_input1,\" \n                                        group by  item_category\n                                        order by Category\"))\n      \n      output$category_analysis_graph <- renderPlotly({\n        \n        f <- list(family = \"Courier New, monospace\",size = 18,color = \"#7f7f7f\")\n        x <- list(title = \"Category\",titlefont = f)\n        y <- list(title = \"Revenue ($)\",titlefont = f)\n        \n        categorychart<-plot_ly(x=ycategoryDF$Category,y=ycategoryDF$Revenue,type=\"bar\",color = ycategoryDF$Category, showlegend=FALSE)%>%\n          layout(xaxis = x, yaxis = y, showlegend=FALSE)\n        \n        return(categorychart)\n        \n      }) ## output$category_analysis_graph\n      \n      #######################  Brand Table 3 4  #######################################\n      \n      ybrandDF<- sqlQuery(con,paste0(\"select top 10 brand_name as Brand,\n                                     sum(net_pay) as Revenue \n                                     from sales_data,brand_data,item_data \n                                     where brand_data.brand_id = item_data.brand_id \n                                     and item_data.item_id = sales_data.item_id\n                                     and year(sales_data.sold_date) = \",str_input1,\"\n                                     group by brand_name \n                                     order by Revenue DESC\"))\n      \n      output$brand_sales_graph<- renderGvis({\n        BrandRevenue<- select(ybrandDF,Brand,Revenue)\n        BrandRevenuechart<-gvisTable(BrandRevenue,options=list(height=\"250px\"))\n        return(BrandRevenuechart)\n        \n      })##output$brand_sales_graph\n      \n      #################  Branch Map 3 5  ###############################################\n      \n      ybranchDF<-sqlQuery(con,paste0(\"select branch_name as Branch,\n                                     sum(net_pay) as Revenue,\n                                     branch_data.lat as latitude,\n                                     branch_data.lon as longitude \n                                     from branch_data,sales_data \n                                     where branch_data.branch_id = sales_data.branch_id \n                                     and year(sales_data.sold_date) = \",str_input1,\"\n                                     group by branch_name, branch_data.lat,branch_data.lon\n                                     order by Branch\"))\n      \n      output$branch_analysis_graph <- renderLeaflet({\n        leaflet(data=ybranchDF) %>%\n          addTiles(urlTemplate = \"//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png\",\n                   attribution = 'Maps by <a href=\"http://www.mapbox.com/\">Mapbox</a>') %>%\n          \n          addMarkers(data = ybranchDF, lng = ybranchDF$longitude, lat = ybranchDF$latitude, \n                     popup = paste( \"<div class='leaflet-popup-scrolled' style='max-height:200px'>\",\n                                    \"<h5 style='color:black'><b>\",ybranchDF$Branch,\":\",ybranchDF$Revenue,\"</b></h5>\"))%>%\n          setView(lng = ybranchDF$longitude, lat = ybranchDF$latitude, zoom = 7) %>%\n          fitBounds(lng1 = max(ybranchDF$longitude),lat1 = max(ybranchDF$latitude),\n                    lng2 = min(ybranchDF$longitude),lat2 = min(ybranchDF$latitude))%>%\n          clearBounds()\n        \n      }) ##output$branch_analysis_graph\n      \n      ########################### Registered Vs Unregistered Chart 3 6  ##############################\n      \n      yregisterVsUnregistered <- \n        sqlQuery(con, paste0(\"select customer_type,sum(net_pay) as Revenue  from \n                             (select case when \n                             customer_id = 0 then 'Unregistered'\n                             else 'Registered' end as customer_type, \n                             net_pay from sales_data where year(sold_date) =\",str_input1,\") table1\n                             group by customer_type\"))\n      \n      output$registered_sales_graph<- renderHighchart({\n        \n        highchart(width = 100, height = 100) %>%\n          hc_title(text = \"\") %>%\n          \n          hc_chart(type = \"pie\", options3d = list(enabled = TRUE, alpha = 70, beta = 0,color = 'rgb(255, 110, 176)')) %>%\n          hc_plotOptions(pie = list(depth = 70)) %>%\n          hc_add_series_labels_values(yregisterVsUnregistered$customer_type,yregisterVsUnregistered$Revenue) %>%\n          hc_add_theme(hc_theme(\n            chart = list(backgroundColor = NULL)\n          ))\n      })  ### Output$registered_sales_graph()\n      \n      ##################### Gender Chart 3 7 ######################################################\n      \n      ygenderDF <- sqlQuery(con, paste0(\"select Gender, sum(Revenue) as Revenue from (select case \n                                        when item_for = 'boy' then 'Male'\n                                        when item_for = 'Men' then 'Male'\n                                        when item_for = 'girl' then 'Female' \n                                        when item_for = 'Women' then 'Female' \n                                        when item_for = 'home-utility' then 'Home-Utility' end as Gender, \n                                        sum(net_pay) as Revenue from item_data,sales_data\n                                        where item_data.item_id = sales_data.item_id and\n                                        year(sales_data.sold_date) = \",str_input1,\"\n                                        group by  item_for) table1 group by Gender\"))\n      \n      output$gender_sales_graph<- renderHighchart({\n        \n        highchart(width = 100, height = 100) %>%\n          hc_title(text = \"\") %>%\n          \n          hc_chart(type = \"pie\", options3d = list(enabled = TRUE, alpha = 70, beta = 0,color = 'rgb(255, 110, 176)')) %>%\n          hc_plotOptions(pie = list(depth = 70)) %>%\n          hc_add_series_labels_values(ygenderDF$Gender,ygenderDF$Revenue) %>%\n          hc_add_theme(hc_theme(\n            chart = list(backgroundColor = NULL)\n          ))\n      })\n      \n      #################### Ages Graph 3 8 ########################################################\n      \n      yagesDF<-sqlQuery(con, paste0(\"select item_for,sum(net_pay) as Revenue from item_data,sales_data\n                                    where item_data.item_id = sales_data.item_id and\n                                    year(sales_data.sold_date) =\",str_input1,\" \n                                    group by  item_for\"))\n      \n      output$age_analysis_graph <- renderPlotly({\n        \n        f <- list(family = \"Courier New, monospace\",size = 18,color = \"#7f7f7f\")\n        x <- list(title = \"Category\",titlefont = f)\n        y <- list(title = \"Revenue ($)\",titlefont = f)\n        \n        ageschart<-plot_ly(x=yagesDF$item_for,y=yagesDF$Revenue,type=\"bar\",color = yagesDF$item_for, showlegend=FALSE)%>%\n          layout(xaxis = x, yaxis = y, showlegend=FALSE)\n        \n        return(ageschart)\n        \n      }) ## output$gender_analysis_graph\n      \n      ##################### Group Graph 3 9 ################################################################\n      \n      yRevenueDF1 <- sqlQuery(con, paste0(\"select month(sold_date) as Month,\n                                          sum(net_pay) as Revenue\n                                          from sales_data where year(sales_data.sold_date)=\",str_input1,\"\n                                          group by month(sold_date)  \n                                          order by month(sold_date)\"))\n      \n      ybranchDF1 <- sqlQuery(con,paste0(\"select month(sales_data.sold_date) as Month,\n                                        sum(net_pay) as Revenue\n                                        from branch_data,sales_data \n                                        where branch_data.branch_id = sales_data.branch_id and\n                                        year(sales_data.sold_date) = \",str_input1,\" and\n                                        branch_data.branch_name = '\", str_input4, \"'\n                                        group by branch_name, month(sales_data.sold_date) \n                                        order by Month\"))\n      \n      \n      ycategoryDF1 <- sqlQuery(con,paste0(\"select month(sales_data.sold_date) as Month,\n                                          sum(sales_data.net_pay) as Revenue \n                                          FROM item_data,sales_data \n                                          where sales_data.item_id = item_data.item_id and\n                                          year(sales_data.sold_date)=\",str_input1,\" and\n                                          item_category = '\", str_input3, \"'\n                                          group by  month(sales_data.sold_date) \n                                          order by Month\"))\n      \n      print(str_input5)\n      ybrandDF1 <- sqlQuery(con,paste0(\"select month(sales_data.sold_date) as Month,\n                                       sum(net_pay) as Revenue \n                                       from sales_data,brand_data,item_data \n                                       where brand_data.brand_id = item_data.brand_id \n                                       and item_data.item_id = sales_data.item_id and\n                                       year(sales_data.sold_date)=\",str_input1,\" and\n                                       brand_data.brand_name = '\",str_input5,\"'\n                                       group by month(sales_data.sold_date)\n                                       order by Month\"))\n      print(str_input5)\n      \n      ybranchDF1$month_labels <- list(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\")\n      \n      output$group_analysis_graph<- renderHighchart({\n        \n        highchart() %>%\n          hc_chart(type=\"grouped\") %>%\n          \n          hc_xAxis(categories=ybranchDF1$month_labels) %>%\n          hc_yAxis(\n            title = list(text = \"Revenue\")\n          ) %>%\n          hc_add_series(name = \"Category\",data = ycategoryDF1$Revenue,type = \"column\",color=\"orange\") %>%\n          hc_add_series(name = \"Branch\",data = ybranchDF1$Revenue,type = \"line\",color=\"green\") %>%\n          hc_add_series(name = \"Brand\",data = ybrandDF1$Revenue,type = \"line\",color=\"red\")\n      }) ## output$group_analysis_graph\n      \n      \n      \n      \n    }else{       ### if-3 \n      \n      str_input2 <- as.integer(str_input2)\n      \n      ######################## Revenue Graph  4  1 ########################################################\n      \n      yRevenueDF<-sqlQuery(con, paste0(\"select sum(net_pay) as Revenue,day(sold_date) as Days\n                                       from sales_data where year(sold_date)=\",str_input1,\" \n                                       and month(sold_date)=\",str_input2,\" \n                                       group by day(sold_date) \n                                       order by day(sold_date)\"))\n      \n      output$year_sales_graph<- renderPlotly({\n        \n        f <- list(family = \"Courier New, monospace\",size = 18,color = \"#7f7f7f\")\n        x <- list(title = \"Day\",titlefont = f)\n        y <- list(title = \"Revenue ($)\",titlefont = f)\n        \n        revenuechart<-plot_ly(x=as.integer(yRevenueDF$Days),y=yRevenueDF$Revenue,type=\"area\", showlegend=FALSE)%>%\n          layout(xaxis = x, yaxis = y, showlegend=FALSE)\n        year_sales_graph<-plotly_build(qplot(1:10))\n        year_sales_graph$elementId <- NULL\n        return(revenuechart)\n      }) ## Output$year_sales_graph\n      \n      ####################### Wordcloud 4 2 #####################################################\n      \n      ywordcloud <-sqlQuery(con, paste0(\"select item_name as Item from item_data, sales_data \n                                        where sales_data.item_id = item_data.item_id\n                                        and year(sales_data.sold_date)=\",str_input1,\"and\n                                        month(sales_data.sold_date)=\",str_input2))\n      \n      \n      item_name = gsub(\"(RT|via)((?:\\\\b\\\\W*@\\\\w+)+)\",\"\", ywordcloud$Item )\n      \n      item_name = gsub(\"@\\\\w+\", \"\", item_name)   # remove at people\n      \n      item_name = gsub(\"[[:punct:]]\", \"\", item_name)   # remove punctuation\n      \n      item_name = gsub(\"[[:digit:]]\", \"\", item_name)   # remove numbers\n      \n      item_df <- data.frame(item_name) ## dataframe\n      \n      itemcorpus <- Corpus(VectorSource(item_df$item_name))   ## corpus\n      \n      \n      output$word_cloud<- renderPlot({\n        pal <- brewer.pal(9,\"Spectral\")\n        pal <- pal[(1:9)]\n        set.seed(123)\n        wordcloud::wordcloud(words = itemcorpus,scale=c(3.5,.5),max.words=75,\n                             random.order=FALSE,rot.per=0.35, use.r.layout=FALSE, colors=pal)\n      }) ### output$wordcloud()\n      \n      ########################### Category Graph 4 3 #####################################\n      \n      ycategoryDF<-sqlQuery(con,paste0(\"select item_category as Category,\n                                       sum(sales_data.net_pay) as Revenue \n                                       FROM item_data,sales_data \n                                       where sales_data.item_id = item_data.item_id\n                                       and year(sold_date)=\",str_input1,\" \n                                       and month(sold_date)=\",str_input2,\"\n                                       group by  item_category\n                                       order by Category\"))\n      \n      output$category_analysis_graph <- renderPlotly({\n        \n        f <- list(family = \"Courier New, monospace\",size = 18,color = \"#7f7f7f\")\n        x <- list(title = \"Category\",titlefont = f)\n        y <- list(title = \"Revenue ($) \",titlefont = f)\n        \n        categorychart<-plot_ly(x = ycategoryDF$Category,y = ycategoryDF$Revenue,type=\"bar\",\n                               text = y, textposition = 'auto',\n                               color = ycategoryDF$Category, showlegend=FALSE)%>%\n          layout(xaxis = x, yaxis = y, showlegend=FALSE)\n        \n        return(categorychart)\n        \n      }) ## output$category_analysis_graph\n      \n      ##########################  Brand Table 4 4 #############################\n      \n      ybrandDF<- sqlQuery(con,paste0(\"select top 10 brand_name as Brand,\n                                     sum(net_pay) as Revenue \n                                     from sales_data,brand_data,item_data \n                                     where brand_data.brand_id = item_data.brand_id \n                                     and item_data.item_id = sales_data.item_id\n                                     and year(sales_data.sold_date) = \",str_input1,\"\n                                     and month(sales_data.sold_date) = \",str_input2,\"\n                                     group by brand_name \n                                     order by Revenue DESC\"))\n      \n      output$brand_sales_graph<- renderGvis({\n        BrandRevenue<- select(ybrandDF,Brand,Revenue)\n        BrandRevenuechart<-gvisTable(BrandRevenue,options=list(height=\"250px\"))\n        return(BrandRevenuechart)\n        \n      }) ### output$brand_sales_graph\n      \n      ################## Branch Map 4 5 ################################################\n      \n      ybranchDF<-sqlQuery(con,paste0(\"select branch_name as Branch,\n                                     sum(net_pay) as Revenue,\n                                     branch_data.lat as latitude,\n                                     branch_data.lon as longitude \n                                     from branch_data,sales_data \n                                     where branch_data.branch_id = sales_data.branch_id \n                                     and year(sales_data.sold_date) = \",str_input1,\"\n                                     and month(sales_data.sold_date) = \",str_input2,\"\n                                     group by branch_name, branch_data.lat,branch_data.lon\n                                     order by Branch\"))\n      \n      output$branch_analysis_graph <- renderLeaflet({\n        leaflet(data=ybranchDF) %>%\n          addTiles(urlTemplate = \"//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png\",\n                   attribution = 'Maps by <a href=\"http://www.mapbox.com/\">Mapbox</a>') %>%\n          \n          addMarkers(data = ybranchDF, lng = ybranchDF$longitude, lat = ybranchDF$latitude,\n                     popup = paste( \"<div class='leaflet-popup-scrolled' style='max-height:200px'>\",\n                                    \"<h5 style='color:black'><b>\",ybranchDF$Branch,\":\",ybranchDF$Revenue,\"</b></h5>\"))%>%\n          setView(lng = ybranchDF$longitude, lat = ybranchDF$latitude, zoom = 7) %>%\n          fitBounds(lng1 = max(ybranchDF$longitude),lat1 = max(ybranchDF$latitude),\n                    lng2 = min(ybranchDF$longitude),lat2 = min(ybranchDF$latitude))%>%\n          clearBounds()\n        \n      }) ##output$branch_analysis_graph\n      \n      ###################### Registered Vs Unregistered Chart 4 6 ################################\n      \n      yregisterVsUnregistered <- sqlQuery(con, paste0(\"select customer_type,sum(net_pay) as Revenue  from \n                                                      (select case when \n                                                      customer_id = 0 then 'Unregistered'\n                                                      else 'Registered' end as customer_type, \n                                                      net_pay from sales_data where\n                                                      year(sold_date) =\",str_input1,\" and\n                                                      month(sold_date) =\",str_input2,\" ) table1 \n                                                      group by customer_type\"))\n      \n      output$registered_sales_graph<- renderHighchart({\n        \n        highchart(width = 100, height = 100) %>%\n          hc_title(text = \"\") %>%\n          \n          hc_chart(type = \"pie\", options3d = list(enabled = TRUE, alpha = 70, beta = 0,color = 'rgb(255, 110, 176)')) %>%\n          hc_plotOptions(pie = list(depth = 70)) %>%\n          hc_add_series_labels_values(yregisterVsUnregistered$customer_type,yregisterVsUnregistered$Revenue) %>%\n          hc_add_theme(hc_theme(\n            chart = list(backgroundColor = NULL)\n          ))\n      }) ### output$registered_sales_graph()\n      \n      ####################### Gender Graph 4 7  ###########################################\n      \n      ygenderDF <- sqlQuery(con, paste0(\"select Gender, sum(Revenue) as Revenue from (select case \n                                        when item_for = 'boy' then 'Male'\n                                        when item_for = 'Men' then 'Male'\n                                        when item_for = 'girl' then 'Female' \n                                        when item_for = 'Women' then 'Female' \n                                        when item_for = 'home-utility' then 'Home-Utility' end as Gender, \n                                        sum(net_pay) as Revenue from item_data,sales_data\n                                        where item_data.item_id = sales_data.item_id\n                                        group by  item_for) table1 group by Gender\"))\n      output$gender_sales_graph<- renderHighchart({\n        \n        highchart(width = 100, height = 100) %>%\n          hc_title(text = \"\") %>%\n          \n          hc_chart(type = \"pie\", options3d = list(enabled = TRUE, alpha = 70, beta = 0,color = 'rgb(255, 110, 176)')) %>%\n          hc_plotOptions(pie = list(depth = 70)) %>%\n          hc_add_series_labels_values(ygenderDF$Gender,ygenderDF$Revenue) %>%\n          hc_add_theme(hc_theme(\n            chart = list(\n              backgroundColor = NULL\n              \n            )\n          ))\n      }) ### gendergraph\n      \n      ################################# Age Group Chart 4 8  ############################################\n      \n      yagesDF<-sqlQuery(con, paste0(\"select item_for,sum(net_pay) as Revenue from item_data,sales_data\n                                    where item_data.item_id = sales_data.item_id and\n                                    year(sales_data.sold_date) = \",str_input1,\" and\n                                    month(sales_data.sold_date) =\",str_input2,\" \n                                    group by  item_for\"))\n      \n      output$age_analysis_graph <- renderPlotly({\n        \n        f <- list(family = \"Courier New, monospace\",size = 18,color = \"#7f7f7f\")\n        x <- list(title = \"Category\",titlefont = f)\n        y <- list(title = \"Revenue ($)\",titlefont = f)\n        \n        ageschart<-plot_ly(x=yagesDF$item_for,y=yagesDF$Revenue,type=\"bar\",color = yagesDF$item_for, showlegend=FALSE)%>%\n          layout(xaxis = x, yaxis = y, showlegend=FALSE)\n        \n        return(ageschart)\n        \n      }) ## output$age_analysis_graph\n      \n      \n      ##################### Group Graph 4 9 ################################################################\n      \n     yRevenueDF1 <- sqlQuery(con, paste0(\"select day(sold_date) as Day,\n                                          sum(net_pay) as Revenue\n                                          from sales_data where year(sales_data.sold_date)=\",str_input1,\"\n                                          and month(sales_data.sold_date) = \",str_input2,\"\n                                          group by day(sold_date)  \n                                          order by day(sold_date)\"))\n      \n      ybranchDF1 <- sqlQuery(con,paste0(\"select day(sales_data.sold_date) as Day,\n                                        sum(net_pay) as Revenue\n                                        from branch_data,sales_data \n                                        where branch_data.branch_id = sales_data.branch_id and\n                                        year(sales_data.sold_date)=\",str_input1,\" and\n                                        month(sales_data.sold_date) = \",str_input2,\" and\n                                        branch_data.branch_name = '\", str_input4, \"'\n                                        group by branch_name, day(sales_data.sold_date) \n                                        order by Day\"))\n      \n      ycategoryDF1 <- sqlQuery(con,paste0(\"select day(sales_data.sold_date) as Day,\n                                          sum(sales_data.net_pay) as Revenue \n                                          FROM item_data,sales_data \n                                          where sales_data.item_id = item_data.item_id and\n                                          year(sales_data.sold_date)=\",str_input1,\" and\n                                          month(sales_data.sold_date) = \",str_input2,\" and\n                                          item_category = '\", str_input3, \"'\n                                          group by  Day(sales_data.sold_date) \n                                          order by Day\"))\n      \n      ybrandDF1 <- sqlQuery(con,paste0(\"select Day(sales_data.sold_date) as Day,\n                                       sum(net_pay) as Revenue \n                                       from sales_data,brand_data,item_data \n                                       where brand_data.brand_id = item_data.brand_id \n                                       and item_data.item_id = sales_data.item_id and\n                                       year(sales_data.sold_date)=\",str_input1,\" and \n                                       month(sales_data.sold_date) = \",str_input2,\" and\n                                       brand_data.brand_name = '\", str_input5, \"'\n                                       group by Day(sales_data.sold_date)\n                                       order by Day\"))\n      \n      output$group_analysis_graph<- renderHighchart({\n        \n        highchart() %>%\n          hc_chart(type=\"grouped\") %>%\n          \n          hc_xAxis(categories=ycategoryDF1$Day) %>%\n          hc_yAxis(\n            title = list(text = \"Revenue\")\n          ) %>%\n          hc_add_series(name = \"Category\", data = ycategoryDF1$Revenue,type = \"column\",color=\"orange\") %>%\n          hc_add_series(name = \"Branch\", data = ybranchDF1$Revenue,type = \"line\",color=\"green\") %>%\n          hc_add_series(name = \"Brand\", data = ybrandDF1$Revenue,type = \"line\",color=\"red\")\n      }) ## output$group_analysis_graph\n      \n    } ### else - 3 \n    \n    } ### else - 2\n    \n    odbcCloseAll()\n    \n    })### Observe()\n  \n  })### Server()",
    "created" : 1513659262500.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2784643469",
    "id" : "76710C99",
    "lastKnownWriteTime" : 1514977253,
    "last_content_update" : 1514977253142,
    "path" : "C:/Users/ADMIN/Desktop/Retail_Dashboard/Retail_Dashboard/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}